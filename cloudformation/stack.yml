Parameters:
  BastionAllowedIP:
    Type: String
    Description: The CIDR that will be granted SSH access to the bastion

  InstanceType:
    Type: String
    Description: The instance type for app servers
    Default: t3.small

  AMI:
    Type: String
    Description: App instance AMI
    Default: ami-02354e95b39ca8dec # Amazon Linux 2 us-east-1

Resources:
  #
  # VPC
  #
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: false

  PublicOne:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
      - Key: Name
        Value: PublicOne

  PublicTwo:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      Tags:
      - Key: Name
        Value: PublicTwo

  PrivateOne:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
      - Key: Name
        Value: PrivateOne

  PrivateTwo:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      Tags:
      - Key: Name
        Value: PrivateTwo

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  NATIP1:
    Type: AWS::EC2::EIP

  NATIP2:
    Type: AWS::EC2::EIP

  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NATIP1
          - AllocationId
      SubnetId: !Ref PublicOne

  NATGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NATIP2
          - AllocationId
      SubnetId: !Ref PublicTwo

  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  RouteTablePrivateOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  RouteTablePrivateTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  NATRoute1:
    Type: AWS::EC2::Route
    DependsOn: NATGateway1
    Properties:
      RouteTableId: !Ref RouteTablePrivateOne
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  NATRoute2:
    Type: AWS::EC2::Route
    DependsOn: NATGateway2
    Properties:
      RouteTableId: !Ref RouteTablePrivateTwo
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2

  InternetRouteAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicOne
      RouteTableId: !Ref RouteTablePublic

  InternetRouteAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicTwo
      RouteTableId: !Ref RouteTablePublic

  NATRouteAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateOne
      RouteTableId: !Ref RouteTablePrivateOne

  NATRouteAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateTwo
      RouteTableId: !Ref RouteTablePrivateTwo

  #
  # Bastion
  #
  BastionSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Bastion instance security group
      GroupName: bastion-sg
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Join ['', [!Ref BastionAllowedIP, '/32']]
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  Bastion:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-09d8b5222f2b93bf0
      KeyName: bastion-key
      InstanceType: t3.small
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - Ref: "BastionSG"
          SubnetId: !Ref PublicOne
      Tags:
        - Key: Name
          Value: bastion

  #
  # S3
  #
  AppBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'udacity-project-2-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
    DeletionPolicy: Delete

  #
  # ALB
  #
  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB security group
      GroupName: lb-sg
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: udagram-lb
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSG
      Subnets:
        - !Ref PublicOne
        - !Ref PublicTwo
      Type: application

  HTTPlistener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: "HTTP"

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: app-trgt-grp
      Port: 80
      Protocol: HTTP
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      VpcId: !Ref VPC

  #
  # ASG
  #
  AppRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /

  AppRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: root
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action: s3:*
          Resource: !Join
            - ''
            - - !GetAtt AppBucket.Arn
              - /*
      Roles:
      - !Ref AppRole

  AppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref AppRole

  AppInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: App instance security group
      GroupName: app-instance-sg
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.0.0.0/16
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  LaunchConfig: 
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      ImageId:
        Ref: AMI
      InstanceType: 
        Ref: InstanceType
      IamInstanceProfile: 
        Ref: AppInstanceProfile
      SecurityGroups:
        - !Ref AppInstanceSG
      UserData: !Base64 |
        #!/bin/bash
        yum -y update
        yum -y install httpd
        service httpd start
        cd /var/www/html
        echo 'it works! Udagram, Udacity' > index.html

  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateOne
        - !Ref PrivateTwo
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: 4
      MaxSize: 8
      TargetGroupARNs:
        - !Ref TargetGroup


Outputs:
  BastionIP:
    Value: !GetAtt Bastion.PublicIp

  LBName:
    Value: !GetAtt ALB.DNSName